server {
    listen       80;
    listen  [::]:80;
    server_name harpsharp.com;
    include /etc/nginx/conf.d/header.conf;
    return 308 https://harpsharp.com$request_uri;
}

upstream auth {
	server auth:8080;
}

upstream board {
    server board:8080;
}

upstream todo {
    server todo:8080;
}

upstream front {
    server front:3000;
}

upstream gpt {
    server gpt4o:5001;
}

upstream swagger {
    server swagger:8080;
}


server {
       listen  443 ssl;
       listen [::]:443;
       server_name harpsharp.com;
       # Certificate
       ssl_certificate /etc/letsencrypt/live/harpsharp.com/fullchain.pem;
       # Private Key
       ssl_certificate_key /etc/letsencrypt/live/harpsharp.com/privkey.pem;
       include /etc/letsencrypt/options-ssl-nginx.conf;
       ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

       location / {
            include /etc/nginx/conf.d/header.conf;
            proxy_pass http://front;
       }

       # API 엔드포인트 설정
       location = /api/v1/login {
            rewrite ^/api/v1(?<realuri>/.*)$ $realuri break;
            include /etc/nginx/conf.d/header.conf;
            proxy_pass http://auth;
       }

       location = /api/v1/logout {
            rewrite ^/api/v1(?<realuri>/.*)$ $realuri break;
            include /etc/nginx/conf.d/header.conf;
            proxy_pass http://auth;
       }

       location = /api/v1/join {
            include /etc/nginx/conf.d/header.conf;
            proxy_pass http://auth;
       }

       location /api/v1/user {
            limit_except GET POST PATCH DELETE {
                deny all;
            }

            include /etc/nginx/conf.d/header.conf;
            proxy_pass http://auth;
       }

       location /api/v1/gpt {
            rewrite ^/api/v1/gpt(?<realuri>/.*)$ $realuri break;
            include /etc/nginx/conf.d/header.conf;
            proxy_pass http://gpt;
       }

       location = /api/v1/verify {
            internal;
            include /etc/nginx/conf.d/header.conf;
            proxy_pass http://auth;
       }

       location = /api/v1/board {
            include /etc/nginx/conf.d/header.conf;
            proxy_pass http://board;
       }

       location /api/v1/board/posts {
            if ($request_method = GET) {
                rewrite ^ /internal$uri last;
            }

            auth_request /api/v1/verify;
            include /etc/nginx/conf.d/header.conf;
            proxy_pass http://board;
       }

       location /internal/api/v1/board/posts {
            internal;
            rewrite ^/internal(?<realuri>/.*)$ $realuri break;
            include /etc/nginx/conf.d/header.conf;
            proxy_pass http://board;
       }

       location = /api/v1/todo {
            include /etc/nginx/conf.d/header.conf;
            proxy_pass http://todo;
       }

       location /api/v1/todo/posts {
            if ($request_method = GET) {
                rewrite ^ /internal$uri last;
            }

            auth_request /api/v1/verify;
            include /etc/nginx/conf.d/header.conf;
            proxy_pass http://todo;
       }

       location /internal/api/v1/todo/posts {
            internal;
            rewrite ^/internal(?<realuri>/.*)$ $realuri break;
            include /etc/nginx/conf.d/header.conf;
            proxy_pass http://todo;
       }

       location /docs {
            rewrite ^/docs(?<realuri>/.*)?$ $realuri break;
            include /etc/nginx/conf.d/header.conf;
            proxy_pass http://swagger;
       }

       location ~ ^/(swagger|webjars|configuration|swagger-resources|v2|csrf) {
             proxy_pass http://swagger;
             proxy_set_header Host $host;
             proxy_set_header X-Real-IP $remote_addr;
             proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
             proxy_set_header X-Forwarded-Proto $scheme;
       }
}
