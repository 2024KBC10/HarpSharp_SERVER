server {
    listen       80;
    listen  [::]:80;
    server_name harpsharp.com;
    include /etc/nginx/conf.d/header.conf;
    return 308 https://harpsharp.com$request_uri;
}

server {
       listen  443 ssl;
       listen [::]:443;
       server_name harpsharp.com;
       # Certificate
       ssl_certificate /etc/letsencrypt/live/harpsharp.com/fullchain.pem;
       # Private Key
       ssl_certificate_key /etc/letsencrypt/live/harpsharp.com/privkey.pem;
       include /etc/letsencrypt/options-ssl-nginx.conf;
       ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

       location = / {
            include /etc/nginx/conf.d/header.conf;
            proxy_pass http://auth:8080;
       }

       # API 엔드포인트 설정
       location = /login {
            include /etc/nginx/conf.d/header.conf;
            proxy_pass http://auth:8080/login;
       }

       location = /logout {
            include /etc/nginx/conf.d/header.conf;
            proxy_pass http://auth:8080/logout;
       }

       location = /join {
            include /etc/nginx/conf.d/header.conf;
            proxy_pass http://auth:8080/join;
       }

       location /user {
            limit_except GET POST PATCH DELETE {
                deny all;
            }

            include /etc/nginx/conf.d/header.conf;
            proxy_pass http://auth:8080/user;
       }

       location = /reissue {
            include /etc/nginx/conf.d/header.conf;
            proxy_pass http://auth:8080/reissue;
       }

       location = /verify {
            internal;
            include /etc/nginx/conf.d/header.conf;
            proxy_pass_request_body off;  # 본문을 보내지 않음
            proxy_set_header Content-Length "";
            proxy_pass http://auth:8080/verify;
        }

        location = /docs/auth {
            rewrite ^/docs/.*$ break;
            include /etc/nginx/conf.d/header.conf;
            proxy_pass http://swagger-auth:8080;
        }

       location ~* /todo/(.*)$ {
            set $auth_request '';

            if ($request_method != 'GET') {
                set $auth_request '/verify';
            }

            auth_request $auth_request;

            include /etc/nginx/conf.d/header.conf;
            proxy_pass http://todo:8080/$1;
       }

       location ~ /board/posts(/(.*))?$ {
           set $auth_request '';

           if ($request_method != 'GET') {
               set $auth_request 'http://auth:8080/verify/posts';
           }

           auth_request $auth_request;
           include /etc/nginx/conf.d/header.conf;

           set $post_id $2;

           # $post_id가 빈 문자열일 경우 처리
           if ($post_id = '') {
               set $post_path "/board/posts";
           }

           # $post_id가 존재할 경우 처리
           if ($post_id != '') {
               set $post_path "/board/posts/$post_id";
           }

           proxyy_pass http://board:8080$post_path;
       }


        location ~ /board/posts/(.*)/comments(/(.*))?$ {
            set $auth_request '';

            if ($request_method != 'GET') {
                set $auth_request 'http://auth:8080/verify/comments';
            }

            auth_request $auth_request;
            include /etc/nginx/conf.d/header.conf;

            set $post_id $1;
            set $comment_id $3;

            # Construct the comments path directly
            if ($comment_id = '') {
                set $comments_path "/board/posts/$post_id/comments";
            }

            if ($comment_id != '') {
                set $comments_path "/board/posts/$post_id/comments/$comment_id";
            }

            proxy_pass http://board:8080$comments_path;
        }

}
