name: CI/CD
on:
  push:
    branches:
      - feature/auth
      - dev
      - main
  workflow_dispatch:

jobs:
  backend-CI:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: wlghks24461!
          MYSQL_DATABASE: harpsharp
          MYSQL_USE_SSL: false
          MYSQL_SERVER_TIMEZONE: Asia/Seoul
          MYSQL_CHARACTER_ENCODING: UTF-8
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

      redis:
        image: redis
        ports:
          - 6379:6379
        options: --entrypoint redis-server

    steps:
      - name: 체크아웃
        uses: actions/checkout@v2
      - name: Verify MySQL connection from host
        run: |
          sudo apt-get install -y mysql-client
          mysql --host mysql --port 3306 -u root -p wlghks24461! -e "SHOW DATABASES"
      - name: Verify Redis connection from host
        run: |
          sudo apt-get install -y redis-tools
          redis-cli -h redis -p 6379 ping
      - name: JDK 17 설정
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "corretto"

      - name: Application YML 생성
        run: |
          mkdir -p auth/src/main/resources
          echo "${{ secrets.APPLICATION_AUTH_YML }}" | base64 --decode > auth/src/main/resources/application.yml

      - name: Gradle 빌드
        run: |
          cd auth
          mkdir -p build/generated-snippets/
          chmod +x gradlew
          ./gradlew build
          ./gradlew openapi3
        shell: bash

      - name: Configure AWS credentials
        if: ${{ github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/feature/auth'}}
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: S3에 업로드
        if: ${{ github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/feature/auth'}}
        run: |
          mkdir -p before-deploy-auth
          cp auth/build/libs/auth-*.jar before-deploy-auth/
          cp scripts/*.sh before-deploy-auth/
          cp appspec.yml before-deploy-auth/
          cp Dockerfile before-deploy-auth/
          cd before-deploy-auth && zip -r before-deploy-auth *
          cd ../ && mkdir -p deploy-auth
          mv before-deploy-auth/before-deploy-auth.zip deploy-auth/deploy-auth.zip
          aws s3 cp deploy-auth/deploy-auth.zip s3://${{ secrets.AWS_BUCKET_NAME }}/deploy-auth.zip
          aws deploy create-deployment \
          --application-name ${{ secrets.AWS_CODEDEPLOY_APP_NAME }} \
          --deployment-config-name CodeDeployDefault.AllAtOnce \
          --deployment-group-name ${{ secrets.AWS_CODEDEPLOY_GROUP_NAME }} \
          --file-exists-behavior OVERWRITE \
          --s3-location bucket=${{ secrets.AWS_BUCKET_NAME }},bundleType=zip,key=deploy.zip
