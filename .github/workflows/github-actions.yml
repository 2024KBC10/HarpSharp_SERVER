name: CI/CD
on:
  push:
    branches:
      - feature/auth
      - dev
      - main
  workflow_dispatch:

jobs:
  backend-CI:
    runs-on: ubuntu-latest

    services:
      db:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: wlghks24461!
          MYSQL_DATABASE: harpsharp
          MYSQL_USE_SSL: false
          MYSQL_SERVER_TIMEZONE: Asia/Seoul
          MYSQL_CHARACTER_ENCODING: UTF-8
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

      redis:
        image: redis
        ports:
          - 6379:6379
        options: --entrypoint redis-server

    steps:
      - name: 체크아웃
        uses: actions/checkout@v2
      - name: Verify MySQL connection from host
        run: mysql -h 127.0.0.1 --port=3306 -u root -pwlghks24461! -e "SHOW DATABASES"

      - name: JDK 17 설정
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "corretto"

      - name: YML 파일 생성
        run: |
          mkdir -p auth/src/main/resources
          echo "${{ secrets.APPLICATION_AUTH_LOCAL }}" | base64 --decode > auth/src/main/resources/application.yaml
          echo "${{ secrets.APPLICATION_AUTH_PROD  }}" | base64 --decode > auth/src/main/resources/application-prod.yaml
      - name: Gradle 빌드 && API 명세서 업로드
        run: |
          mkdir -p auth/build/generated-snippets/
          chmod +x auth/gradlew
          auth/gradlew build --no-build-cache --warning-mode all
          auth/gradlew openapi3 --no-build-cache --warning-mode all

        shell: bash
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}

      - name: Configure AWS credentials
        if: ${{ github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/feature/auth'}}
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: S3에 업로드(Auth)
        if: ${{ github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/feature/auth'}}
        run: |
          FILE_PATH=$(find . -name HarpSharp_API_Auth.json)
          mkdir -p before-deploy-auth
          cp auth/build/libs/auth-*.jar before-deploy-auth/
          cp auth/scripts/*.sh before-deploy-auth/
          cp auth/appspec.yml before-deploy-auth/
          cp auth/Dockerfile before-deploy-auth/
          cp auth/docker-compose.yml before-deploy-auth/
          cp $FILE_PATH before-deploy-auth/
          cd before-deploy-auth && zip -r before-deploy-auth *
          cd ../ && mkdir -p deploy-auth
          mv before-deploy-auth/before-deploy-auth.zip deploy-auth/deploy-auth.zip
          aws s3 cp deploy-auth/deploy-auth.zip s3://${{ secrets.AWS_BUCKET_NAME }}/deploy-auth.zip
          aws deploy create-deployment \
          --application-name ${{ secrets.AWS_CODEDEPLOY_APP_NAME }} \
          --deployment-config-name CodeDeployDefault.AllAtOnce \
          --deployment-group-name ${{ secrets.AWS_CODEDEPLOY_GROUP_NAME }} \
          --file-exists-behavior OVERWRITE \
          --s3-location bucket=${{ secrets.AWS_BUCKET_NAME }},bundleType=zip,key=deploy-auth.zip

      - name: S3에 업로드(nginx)
        if: ${{ github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/feature/auth'}}
        run : |
          mkdir -p before-deploy-nginx
          cp -r ./nginx before-deploy-nginx/
          cd before-deploy-nginx && zip -r before-deploy-nginx *
          cd ../ && mkdir -p deploy-nginx
          mv before-deploy-nginx/before-deploy-nginx.zip deploy-nginx/deploy-nginx.zip
          aws s3 cp deploy-nginx/deploy-nginx.zip s3://${{ secrets.AWS_BUCKET_NAME }}/deploy-nginx.zip
          
          DEPLOYMENT_ID=$(aws deploy list-deployments \
          --application-name ${{ secrets.AWS_CODEDEPLOY_APP_NAME }} \
          --deployment-group-name ${{ secrets.AWS_CODEDEPLOY_GROUP_NAME }} \
          --query "deployments[0]" --output text)
          aws deploy wait deployment-successful --deployment-id $DEPLOYMENT_ID || true
          
          aws deploy create-deployment \
          --application-name ${{ secrets.AWS_CODEDEPLOY_APP_NAME }} \
          --deployment-config-name CodeDeployDefault.AllAtOnce \
          --deployment-group-name ${{ secrets.AWS_CODEDEPLOY_GROUP_NAME }} \
          --file-exists-behavior OVERWRITE \
          --s3-location bucket=${{ secrets.AWS_BUCKET_NAME }},bundleType=zip,key=deploy-nginx.zip

